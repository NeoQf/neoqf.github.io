<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>选择排序</title>
    <url>/2021/08/02/0101010101SelectionSort/</url>
    <content><![CDATA[<h1 id="第一章-选择排序"><a href="#第一章-选择排序" class="headerlink" title="第一章 选择排序"></a>第一章 选择排序</h1><h2 id="1、选择排序思想及过程："><a href="#1、选择排序思想及过程：" class="headerlink" title="1、选择排序思想及过程："></a>1、选择排序思想及过程：</h2><p>先把最小的拿出来</p>
<p>对于剩下的，再把最小的拿出来</p>
<p>对于剩下的，再把最小的拿出来</p>
<p><strong>问题：</strong></p>
<p>1）排序过程占用了额外空间：</p>
<p><img src="/2021/08/02/0101010101SelectionSort/Untitled.png"></p>
<p>2）是否可以原地完成？</p>
<p><img src="/2021/08/02/0101010101SelectionSort/Untitled1.png"></p>
<p>3）如何设计原地排序？</p>
<p>直接利用两个索引，遇到最小的则交换，这样就不需要另外开辟空间。</p>
<p><img src="/2021/08/02/0101010101SelectionSort/Untitled2.png"></p>
<p>循环不变量：</p>
<p><img src="/2021/08/02/0101010101SelectionSort/Untitled3.png"></p>
<h2 id="2、代码实现1，数组版："><a href="#2、代码实现1，数组版：" class="headerlink" title="2、代码实现1，数组版："></a>2、代码实现1，数组版：</h2><p>注意事项：</p>
<p>1）将方法写成static的类型，以方便可直接在main函数中调用，减少不需要的对象创建：</p>
<p><img src="/2021/08/02/0101010101SelectionSort/Untitled4.png"></p>
<p>2）将类的构造函数声明为private，以防止在别的类中创建其对象；注意：虽然此举可以防止在别的类中创建其对象，但是在本类内部还是可以创建该类对象。</p>
<p><img src="/2021/08/02/0101010101SelectionSort/Untitled5.png"></p>
<p>3）循环不变量：</p>
<p><img src="/2021/08/02/0101010101SelectionSort/Untitled6.png"></p>
<h2 id="3、代码实现，泛型版"><a href="#3、代码实现，泛型版" class="headerlink" title="3、代码实现，泛型版"></a>3、代码实现，泛型版</h2><p>1）函数的类型必须是泛型E；</p>
<p>2）由于需要对元素进行比较，所以泛型类型又必须实现Comparable<E>；（使用extends）</E></p>
<p><img src="/2021/08/02/0101010101SelectionSort/Untitled7.png"></p>
<p>3）swap的函数类型也要写成泛型E，另外数组的数据类型也必须是泛型数组；</p>
<p><img src="/2021/08/02/0101010101SelectionSort/Untitled8.png"></p>
<p>4）创建泛型数组，其数据类型必须是类（见注释）：</p>
<p><img src="/2021/08/02/0101010101SelectionSort/Untitled9.png"></p>
<p><strong>代码如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SST_generic</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SST_generic</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环不变量：arr[0...i) 是有序的；arr[i...n)时无序的</span></span><br><span class="line">    <span class="comment">// 对泛型进行约束，必须要是可比较的</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;E extends Comparable&lt;E&gt;&gt; <span class="function"><span class="keyword">void</span> <span class="title">sort1</span><span class="params">(E[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 选择 arr[i...n) 中的最小值的索引</span></span><br><span class="line">            <span class="keyword">int</span> minIndex = i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; arr.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j].compareTo(arr[minIndex]) &lt; <span class="number">0</span>)</span><br><span class="line">                    minIndex = j;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            swap(arr, i, minIndex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;E&gt; <span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(E[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        E t = arr[i];</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对于泛型，其数据类型应该是类，而不能为基本数据类型;</span></span><br><span class="line">        <span class="comment">// 所以声明为int的包装类Integer</span></span><br><span class="line">        <span class="comment">// int[] arr = &#123;1, 4, 2, 3, 6, 5&#125;;</span></span><br><span class="line">        Integer[] arr = &#123;<span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        SST_generic.sort1(arr);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> e: arr)</span><br><span class="line">            System.out.print(e + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Algorithm</category>
        <category>AlgorithmSerials</category>
        <category>Stage1</category>
        <category>Sorting</category>
        <category>SelectionSort</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>SortingAlgorithm</tag>
        <tag>SelectionSorting</tag>
        <tag>Liuyubo</tag>
        <tag>JavaImpAlgo</tag>
      </tags>
  </entry>
</search>
